<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc" 
    xmlns:redis="http://www.springframework.org/schema/redis"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-4.1.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd 
        http://www.springframework.org/schema/redis http://www.springframework.org/schema/redis/spring-redis-1.0.xsd">
    <!-- scan the package and the sub package -->
    <context:component-scan base-package="com.upbchain.springmvc"/>
     <!-- redis 配置 BEGIN -->
    <context:component-scan base-package="cn.slimsmart.redis.spring"  
        annotation-config="true" />  
  
  	<context:property-placeholder location="classpath:redis.properties" />  
   	<bean  id="jedisPoolConfig"  class="redis.clients.jedis.JedisPoolConfig">  
        <!-- 
        <property  name="maxActive" value="${redis.pool.maxActive}" />  
        <property  name="maxIdle" value="${redis.pool.maxIdle}" />  
        <property  name="maxWait" value="${redis.pool.maxWait}" />  
        <property  name="testOnBorrow"  value="${redis.pool.testOnBorrow}" />
         -->  
        <property  name="maxIdle" value="200" />  
        <property  name="testOnBorrow"  value="true" />
    </bean>  
  
    <bean id="jedisConnectionFactory"  
        class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"  
        destroy-method="destroy">  
        <!-- 
        <property name="hostName" value="${redis.ip}" />  
        <property name="port" value="${redis.port}" />  
        <property name="timeout" value="${redis.timeout}" />  
        <property name="database" value="${redis.database}" />  
        <property name="password" value="${redis.password}" />  
        <property name="usePool" value="true" />  
        <property name="poolConfig" ref="jedisPoolConfig" />
         -->  
        <property name="hostName" value="192.168.0.203" />  
        <property name="port" value="6379" />  
        <property name="timeout" value="7200" />  
        <property name="database" value="5" />  
        <property name="password" value="123456" />  
        <property name="usePool" value="true" />  
        <property name="poolConfig" ref="jedisPoolConfig" />
    </bean>  
    
  
    <!-- redis template definition p表示对该bean里面的属性进行注入，格式为p:属性名=注入的对象 效果与在bean里面使用<property>标签一样 -->  
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" >  
     	 <property name="connectionFactory" ref="jedisConnectionFactory" /> 
        <!-- 序列化方式 建议key/hashKey采用StringRedisSerializer。 -->  
        <property name="keySerializer">  
            <bean  
                class="org.springframework.data.redis.serializer.StringRedisSerializer" />  
        </property>  
        <property name="hashKeySerializer">  
            <bean  
                class="org.springframework.data.redis.serializer.StringRedisSerializer" />  
        </property>  
        <property name="valueSerializer">  
            <bean  
                class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer" />  
        </property>  
        <property name="hashValueSerializer">  
            <bean  
                class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer" />  
        </property>  
  
    </bean>  
    <!-- 对string操作的封装  --> 
    <bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate" >
       <property name="connectionFactory" ref="jedisConnectionFactory" />
    </bean>
        
        
    <!-- redis 配置 END -->
    
    <!-- redis订阅 配置  ，需加顶部命名空间 配置 BEGIN -->
    
    
    <!-- 发送者
    <bean id="sendMessage" class="com.upbchain.springmvc.controller.RedisController">
        <property name="redisTemplate" ref="redisTemplate"/>
    </bean> -->
    
     <!-- 监听者 -->
      <!--  
     <bean id="jdkSerializer"
        class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
    
    <bean id="smsMessageListener"
        class="org.springframework.data.redis.listener.adapter.MessageListenerAdapter">
        <property name="delegate" ref="smsMessageDelegateListener" />
        <property name="serializer" ref="jdkSerializer" />
    </bean>
    <redis:listener-container>
        <redis:listener ref="smsMessageListener" method="handleMessage"
            serializer="jdkSerializer" topic="sms_queue_web_online" />
    </redis:listener-container>
    -->
    <!-- <bean id="mdpListener" class="secondriver.spring.redis.MyMessageListener" /> -->
    <!-- <bean id="mdelegateListener" class="secondriver.spring.redis.DefaultMessageDelegate" /> -->
    <redis:listener-container connection-factory="jedisConnectionFactory">
        <!-- <redis:listener ref="mdpListener" topic="spring*" /> -->
        <redis:listener ref="smsMessageDelegateListener" method="handleMessage"
            topic="sms_queue_web_online" />
        <redis:listener ref="smsMessageDelegateListener1" method="handleMessage"
            topic="channel1" />
        <redis:listener ref="smsMessageDelegateListener2" method="handleMessage"
            topic="channel2" />
    </redis:listener-container>
    
    
     
    
    <!-- redis订阅 生产端配置  END -->
    
    

    <!-- don't handle the static resource -->
    <mvc:default-servlet-handler />

    <!-- if you use annotation you must configure following setting -->
    <mvc:annotation-driven />
    
    <!-- configure the InternalResourceViewResolver -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" 
            id="internalResourceViewResolver">
        <!-- 前缀 -->
        <property name="prefix" value="/WEB-INF/jsp/" />
        <!-- 后缀 -->
        <property name="suffix" value=".jsp" />
    </bean>
     <!-- upload settings start-->
    <bean id="multipartResolver"  class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="102400000"></property>
    </bean>
    <!-- upload settings end--> 
    
    <!-- configure SimpleMappingExceptionResolver 全局controller异常处理 -->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <prop key="java.lang.ArithmeticException">exceptionAll2</prop>
            </props>
        </property>
    </bean>
    <!-- interceptor setting 自定义拦截器-->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/mvc/**"/>
            <bean class="com.upbchain.springmvc.interceptor.MyInterceptor"></bean>
        </mvc:interceptor>        
    </mvc:interceptors>
</beans>